# Integers
# An integer is a whole number that can be positive, negative, or zero.
# Integers do not include fractions or decimals.
# You can add, subtract, divide, and multiply integers in Python.

# Basic integer operations
print(1 + 1)  # Outputs: 2
print(1 - 0)  # Outputs: 1
print(6 * 3)  # Outputs: 18
print(6 / 6)  # Outputs: 1.0 (note: division returns a float)

# Floats
# Floats are numbers with a decimal point, such as:
# 1.0, 12.34, 567.89, 1000.123

# The term "float" is short for "floating-point," indicating that the decimal point can move.
# Examples:
print(1.2345 * 1)    # Outputs: 1.2345
print(1.2345 * 10)   # Outputs: 12.345
print(1.2345 * 100)  # Outputs: 123.45
print(1.2345 * 1000) # Outputs: 1234.5

# Division
# In Python, division returns floats to provide accurate results, especially when the result is not a whole number.

# Floating-Point Division: Using the `/` operator performs floating-point division.
result_float = 6 / 2  # result is 3.0 (a float)
print(result_float)

# Integer Division: Use the `//` operator for integer division (quotient without remainder).
result_integer = 6 // 2  # result is 3 (an integer)
print(result_integer)

# Consistency: Returning floats by default helps avoid confusion and ensures consistent behavior for division.

# Please note that your answer may occasionally include an arbitrary number of decimal places.
# For example:
# 0.1 + 0.2 = 0.30000000000000004
# This is common in all programming languages so do not be alarmed. Just ignore the extra decimal places for now.


# Order of Operations

# Python follows a specific order of operations when evaluating mathematical expressions.
# This set of rules determines the correct sequence for calculations, which can be remembered using the acronym PEMDAS:

# P - Parentheses: Solve expressions within parentheses first.
# E - Exponents: Next, calculate powers and square roots.
# MD - Multiplication and Division: Perform these operations from left to right.
# AS - Addition and Subtraction: Finally, process these operations from left to right.

# You can combine multiple operations in a single expression. For example, consider the expression:
# 3 + 6 * (5 + 4) / 3**2 - 7

# Here's how to evaluate it step-by-step:
# 1. Parentheses: 5 + 4 = 9
# 2. Exponents: 3**2 = 9
# 3. Multiplication/Division:
#    - 6 * 9 = 54
#    - 54 / 9 = 6
# 4. Addition/Subtraction: 3 + 6 - 7 = 2

# The final answer is 2.

# Note: The spacing in this example does not impact how Python evaluates the expression.
# It simply improves readability, making it easier to identify the priority of operations in the code.

